---
layout: base.njk
---

<article class="flex flex-col items-center p-8 md:px-20 pt-16 pb-16 gap-6">
  <div class="w-full max-w-[75rem]">
    <!-- Post Header -->
    <header class="flex flex-col gap-4 pb-6 border-b border-[#C0C0C0]">
      {% if image %}
        <div class="flex flex-col md:flex-row gap-4 mb-8">
          <div class="w-full md:max-w-[10.25rem]">
            <button 
              onclick="handleBack()"
              class="flex items-center gap-2 text-[#333333] hover:text-[#001EFF] font-baskerville text-base transition-colors"
              aria-label="Go back to previous page"
            >
              <span aria-hidden="true">←</span>
              <span>back</span>
            </button>
          </div>
          <div class="flex-1">
            <img 
              src="{{ image }}" 
              alt="{{ image_alt or 'Featured image' }}"
              class="max-h-[400px] w-auto object-cover rounded-lg"
              loading="eager"
            >
          </div>
        </div>
      {% endif %}

      <div class="flex flex-col md:flex-row gap-4">
        <!-- Left Column - Type and Date -->
        <div class="w-full md:max-w-[10.25rem] flex flex-col gap-4">
          <div class="text-black text-base font-italic font-baskerville italic underline leading-7">
            {{ type }}
          </div>
          <div class="text-[#000000] text-xs font-baskerville italic">
            {{ page.date | dateReadable }}
          </div>
        </div>

        <!-- Right Column - Title -->
        <div class="flex-1">
          <h1 class="text-black text-[28px] font-manrope font-semibold mb-4">{{ title }}</h1>
          {% if description %}
            <p class="text-black font-baskerville text-base leading-7">{{ description }}</p>
          {% endif %}
        </div>
      </div>
    </header>

    <!-- Main Content -->
    <div class="flex flex-col md:flex-row gap-4 py-8">
      <!-- Left Column Spacer -->
      <div class="hidden md:block md:w-[10.25rem]"></div>

      <!-- Right Column - Content -->
      <div class="flex-1">
        <div class="prose prose-lg max-w-none font-baskerville">
          <style>
            .prose img {
              @apply mx-auto rounded-lg my-8;
              max-width: 100%;
              height: auto;
            }
            .prose img + em {
              @apply block text-center text-[#666666] -mt-6 mb-8 font-baskerville italic;
            }
            .prose h2 {
              @apply text-2xl font-manrope font-semibold mt-8 mb-4;
            }
            .prose p {
              @apply text-base leading-7;
            }
            .prose a {
              @apply text-[#001EFF] underline;
            }
          </style>
          {{ content | safe }}
        </div>

          <div class="flex-1 text-right">
            {% if nextPost %}
              <a href="{{ nextPost.url }}" 
                class="flex items-center justify-end gap-2 text-[#001EFF] hover:underline font-baskerville" 
                rel="next"
                aria-label="Next post: {{ nextPost.data.title }}"
              >
                <span>{{ nextPost.data.title }}</span>
                <span aria-hidden="true">→</span>
              </a>
            {% endif %}
          </div>
        </nav>

        <!-- Comments Section -->
        <section class="mt-12 pt-8 border-t border-[#C0C0C0]" aria-labelledby="comments-title">
          <h2 id="comments-title" class="text-[28px] font-manrope font-semibold mb-8">Comments</h2>
          
          <div id="existing-comments" class="space-y-6 mb-12">
            {% set postComments = comments[page.fileSlug] %}
            {% if postComments and postComments.length > 0 %}
              {% for comment in postComments | reverse %}
                <div class="comment bg-[#F9F9F9] rounded-lg p-6">
                  <div class="flex items-center gap-2 mb-2">
                    <strong class="font-manrope font-medium text-sm">{{ comment.name }}</strong>
                    <span aria-hidden="true" class="text-[#666666]">•</span>
                    <time 
                      datetime="{{ comment.timestamp }}"
                      class="comment-time text-[#666666] text-sm font-baskerville italic"
                      data-timestamp="{{ comment.timestamp }}"
                    ></time>
                  </div>
                  <p class="text-black font-baskerville text-base leading-7 whitespace-pre-wrap">{{ comment.comment }}</p>
                </div>
              {% endfor %}
            {% else %}
              <p class="text-[#666666] italic font-baskerville">No comments yet. Be the first to comment!</p>
            {% endif %}
          </div>

          <form id="comment-form" class="space-y-6" aria-labelledby="comment-form-title">
            <h3 id="comment-form-title" class="text-[28px] font-manrope font-semibold">Add a Comment</h3>
            
            {# Honeypot field #}
            <div class="hidden" aria-hidden="true">
              <label for="website">Website</label>
              <input type="text" id="website" name="website" autocomplete="off" tabindex="-1">
            </div>

            <div class="form-group">
              <label for="name" class="block text-sm font-manrope font-medium mb-1">Name *</label>
              <input 
                type="text" 
                id="name" 
                name="name" 
                required 
                maxlength="50"
                class="w-full px-3 py-2 border border-[#C0C0C0] rounded-md focus:ring-[#001EFF] focus:border-[#001EFF]"
                aria-required="true"
                aria-describedby="name-error"
              >
              <div id="name-error" class="text-red-600 text-sm mt-1 hidden"></div>
            </div>

            <div class="form-group">
              <label for="comment" class="block text-sm font-manrope font-medium mb-1">Comment *</label>
              <textarea 
                id="comment" 
                name="comment" 
                required 
                maxlength="1000"
                rows="4"
                class="w-full px-3 py-2 border border-[#C0C0C0] rounded-md focus:ring-[#001EFF] focus:border-[#001EFF]"
                aria-required="true"
                aria-describedby="comment-error"
              ></textarea>
              <div id="comment-error" class="text-red-600 text-sm mt-1 hidden"></div>
            </div>

            <input type="hidden" name="postSlug" value="{{ page.fileSlug }}">
            <input type="hidden" name="csrf" value="{{ csrf_token }}">
            
            <button 
              type="submit"
              class="w-full py-2 px-4 bg-[#001EFF] text-white rounded-md font-manrope font-medium hover:bg-[#0018CC] focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#001EFF] disabled:opacity-50 disabled:cursor-not-allowed"
              aria-label="Submit comment"
            >
              <span class="submit-text">Submit Comment</span>
              <span class="loading-text hidden">
                Submitting...
                <span class="ml-2 inline-block animate-spin">↻</span>
              </span>
            </button>

            <div 
              id="form-status" 
              role="status" 
              aria-live="polite"
              class="mt-6 p-4 rounded-md hidden font-baskerville"
            ></div>
          </form>
        </section>

        <!-- Tags and Social -->
        <div class="flex justify-between items-center mt-8 pt-6 border-t border-[#C0C0C0]">
          <div class="flex-1">
            {% if tags %}
              <span class="text-[#333333] text-xs font-manrope font-medium leading-7">Tags:</span>
              {% for tag in tags %}
                {% if tag not in ["all", "nav", "post", "posts"] %}
                  <a href="/tags/{{ tag }}/" 
                    class="text-[#333333] text-xs font-baskerville underline leading-7"
                    aria-label="View posts tagged {{ tag }}"
                  >{{ tag }}</a>{% if not loop.last %}, {% endif %}
                {% endif %}
              {% endfor %}
            {% endif %}
          </div>
          
          <!-- Social Icons -->
          <div class="flex gap-4">
            <button 
              class="w-6 h-6 bg-[#333333] mask-twitter" 
              onclick="handleShare('twitter')" 
              aria-label="Share on Twitter"
            ></button>
            <button 
              class="w-6 h-6 bg-[#333333] mask-facebook"
              onclick="handleShare('facebook')" 
              aria-label="Share on Facebook"
            ></button>
            <button 
              class="w-6 h-6 bg-[#333333] mask-linkedin"
              onclick="handleShare('linkedin')" 
              aria-label="Share on LinkedIn"
            ></button>
          </div>
        </div>
      </div>
    </div>
  </div>
</article>

<script>
  // Back button handling
  function handleBack() {
    const previousPage = document.referrer;
    const homeUrl = '/'; // Update this if your home URL is different
    
    if (previousPage && previousPage.includes(window.location.origin)) {
      history.back();
    } else {
      window.location.href = homeUrl;
    }
  }

  const form = document.getElementById('comment-form');
  const status = document.getElementById('form-status');
  const submitButton = form.querySelector('button[type="submit"]');
  const submitText = submitButton.querySelector('.submit-text');
  const loadingText = submitButton.querySelector('.loading-text');
  const comments = document.getElementById('existing-comments');

  function showError(elementId, message) {
    const errorElement = document.getElementById(`${elementId}-error`);
    errorElement.textContent = message;
    errorElement.classList.remove('hidden');
  }

  function clearErrors() {
    const errorElements = form.querySelectorAll('[id$="-error"]');
    errorElements.forEach(el => {
      el.textContent = '';
      el.classList.add('hidden');
    });
  }

  function setLoading(isLoading) {
    submitButton.disabled = isLoading;
    submitText.classList.toggle('hidden', isLoading);
    loadingText.classList.toggle('hidden', !isLoading);
  }

  function showStatus(message, isError = false) {
    status.textContent = message;
    status.classList.remove('hidden');
    
    // Remove all possible status classes
    status.classList.remove('bg-green-100', 'text-green-800', 'bg-red-100', 'text-red-800');
    
    // Add the appropriate status classes individually
    if (isError) {
      status.classList.add('bg-red-100');
      status.classList.add('text-red-800');
    } else {
      status.classList.add('bg-green-100');
      status.classList.add('text-green-800');
    }
  }

  // Format timestamps relative to now
  function formatRelativeTime(timestamp) {
    const date = new Date(timestamp);
    const now = new Date();
    const diffInSeconds = Math.floor((now - date) / 1000);
    
    if (diffInSeconds < 60) {
      return 'just now';
    } else if (diffInSeconds < 3600) {
      const minutes = Math.floor(diffInSeconds / 60);
      return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;
    } else if (diffInSeconds < 86400) {
      const hours = Math.floor(diffInSeconds / 3600);
      return `${hours} hour${hours > 1 ? 's' : ''} ago`;
    } else if (diffInSeconds < 604800) {
      const days = Math.floor(diffInSeconds / 86400);
      return `${days} day${days > 1 ? 's' : ''} ago`;
    } else {
      return date.toLocaleDateString(undefined, { 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
    }
  }

  // Update all timestamps on the page
  function updateTimestamps() {
    document.querySelectorAll('.comment-time').forEach(timeElement => {
      const timestamp = timeElement.dataset.timestamp;
      timeElement.textContent = formatRelativeTime(timestamp);
    });
  }

  // Update timestamps immediately and every minute
  updateTimestamps();
  setInterval(updateTimestamps, 60000);

  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    clearErrors();
    setLoading(true);
    
    const formData = new FormData(form);
    const data = {
      name: formData.get('name').trim(),
      comment: formData.get('comment').trim(),
      postSlug: formData.get('postSlug'),
      csrf: formData.get('csrf'),
      honeypot: formData.get('website')
    };

    // Basic validation
    if (data.name.length < 2) {
      showError('name', 'Name must be at least 2 characters long');
      setLoading(false);
      return;
    }

    if (data.comment.length < 10) {
      showError('comment', 'Comment must be at least 10 characters long');
      setLoading(false);
      return;
    }

    try {
      const response = await fetch('/.netlify/functions/submit-comment', {
        method: 'POST',
        body: JSON.stringify(data),
        headers: {
          'Content-Type': 'application/json'
        }
      });

      const result = await response.json();

      if (result.success) {
        showStatus('Comment submitted successfully! It will appear after moderation.');
        form.reset();
      } else {
        showStatus(result.error || 'Error submitting comment. Please try again.', true);
      }
    } catch (error) {
      console.error('Error:', error);
      showStatus('Error submitting comment. Please try again.', true);
    } finally {
      setLoading(false);
    }
  });
</script>
