---
layout: base.njk
---

<article class="container mx-auto px-4 py-8">
  <header class="mb-8">
    {% if image %}
      <div class="mb-8 -mx-4 sm:-mx-6 md:-mx-8 lg:-mx-12">
        {% image image, title, "eager", "w-full h-[300px] md:h-[400px] object-cover rounded-lg" %}
      </div>
    {% endif %}
    <h1 class="text-4xl font-bold mb-4">{{ title }}</h1>
    <time datetime="{{ page.date | dateIso }}" class="text-gray-600">
      {{ page.date | dateReadable }}
    </time>
  </header>

  <div class="prose prose-lg max-w-none">
    <style>
      .prose img {
        @apply mx-auto rounded-lg shadow-lg my-8;
        max-width: 100%;
        height: auto;
      }
      .prose img + em {
        @apply block text-center text-gray-600 -mt-6 mb-8;
      }
    </style>
    {{ content | safe }}
  </div>

  {% if tags %}
      <div class="tags mt-4 space-x-2">
      tags: 
        {%- for tag in tags -%}
          {%- if tag not in ["all", "nav", "post", "posts"] -%}
            <a 
              href="/tags/{{ tag }}/" 
              class="tag inline-block bg-gray-200 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 hover:bg-gray-300 transition-colors"
              aria-label="View posts tagged {{ tag }}"
            >{{ tag }}</a>
          {%- endif -%}
        {%- endfor -%}
      </div>
    {% endif %}

  <nav class="mt-12 border-t pt-6" aria-label="Post navigation">
    <div class="flex justify-between">
      {%- set previousPost = collections.posts | getPreviousCollectionItem %}
      {%- set nextPost = collections.posts | getNextCollectionItem %}

      {% if previousPost %}
        <a 
          href="{{ previousPost.url }}" 
          class="text-blue-600 hover:text-blue-800 transition-colors flex items-center gap-2" 
          rel="prev"
          aria-label="Previous post: {{ previousPost.data.title }}"
        >
          <span aria-hidden="true">←</span>
          <span>{{ previousPost.data.title }}</span>
        </a>
      {% else %}
        <span></span>
      {% endif %}
 
      {% if nextPost %}
        <a 
          href="{{ nextPost.url }}" 
          class="text-blue-600 hover:text-blue-800 transition-colors flex items-center gap-2" 
          rel="next"
          aria-label="Next post: {{ nextPost.data.title }}"
        >
          <span>{{ nextPost.data.title }}</span>
          <span aria-hidden="true">→</span>
        </a>
      {% else %}
        <span></span>
      {% endif %}
    </div>
  </nav>

  <div class="social-share" aria-label="Share this post">
    <button 
      class="share-button"
      onclick="handleShare('twitter')" 
      aria-label="Share on Twitter"
    >
      Twitter
    </button>
    <button 
      class="share-button"
      onclick="handleShare('facebook')" 
      aria-label="Share on Facebook"
    >
      Facebook
    </button>
    <button 
      class="share-button"
      onclick="handleShare('linkedin')" 
      aria-label="Share on LinkedIn"
    >
      LinkedIn
    </button>
  </div>
</article>

<section class="comments mt-12 border-t pt-8" aria-labelledby="comments-title">
  <h2 id="comments-title" class="text-2xl font-bold mb-8">Comments</h2>
  
  <div id="existing-comments" class="space-y-6 mb-12">
    {% if comments[page.fileSlug] %}
      {% for comment in comments[page.fileSlug] %}
        <div class="comment bg-gray-50 rounded-lg p-6 shadow-sm">
          <div class="comment-meta flex items-center gap-2 text-sm text-gray-600 mb-2">
            <strong class="font-medium text-gray-900">{{ comment.name }}</strong>
            <span aria-hidden="true">•</span>
            <time 
              datetime="{{ comment.timestamp }}"
              class="comment-time"
              data-timestamp="{{ comment.timestamp }}"
            ></time>
          </div>
          <p class="comment-content text-gray-800 whitespace-pre-wrap">{{ comment.comment }}</p>
        </div>
      {% endfor %}
    {% else %}
      <p class="text-gray-600 italic">No comments yet. Be the first to comment!</p>
    {% endif %}
  </div>

  <form id="comment-form" class="comment-form space-y-6" aria-labelledby="comment-form-title">
    <h3 id="comment-form-title" class="text-2xl font-bold">Add a Comment</h3>
    
    {# Honeypot field #}
    <div class="hidden" aria-hidden="true">
      <label for="website">Website</label>
      <input type="text" id="website" name="website" autocomplete="off" tabindex="-1">
    </div>

    <div class="form-group">
      <label for="name" class="block text-sm font-medium text-gray-700 mb-1">Name *</label>
      <input 
        type="text" 
        id="name" 
        name="name" 
        required 
        maxlength="50"
        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
        aria-required="true"
        aria-describedby="name-error">
      <div id="name-error" class="text-red-600 text-sm mt-1 hidden"></div>
    </div>

    <div class="form-group">
      <label for="comment" class="block text-sm font-medium text-gray-700 mb-1">Comment *</label>
      <textarea 
        id="comment" 
        name="comment" 
        required 
        maxlength="1000"
        rows="4"
        class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
        aria-required="true"
        aria-describedby="comment-error"></textarea>
      <div id="comment-error" class="text-red-600 text-sm mt-1 hidden"></div>
    </div>

    <input type="hidden" name="postSlug" value="{{ page.fileSlug }}">
    <input type="hidden" name="csrf" value="{{ csrf_token }}">
    
    <button 
      type="submit"
      class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed"
      aria-label="Submit comment">
      <span class="submit-text">Submit Comment</span>
      <span class="loading-text hidden">
        Submitting...
        <span class="ml-2 inline-block animate-spin">↻</span>
      </span>
    </button>

    <div 
      id="form-status" 
      role="status" 
      aria-live="polite"
      class="mt-6 p-4 rounded-md hidden">
    </div>
  </form>
</section>

<script>
  const form = document.getElementById('comment-form');
  const status = document.getElementById('form-status');
  const submitButton = form.querySelector('button[type="submit"]');
  const submitText = submitButton.querySelector('.submit-text');
  const loadingText = submitButton.querySelector('.loading-text');
  const comments = document.getElementById('existing-comments');

  function showError(elementId, message) {
    const errorElement = document.getElementById(`${elementId}-error`);
    errorElement.textContent = message;
    errorElement.classList.remove('hidden');
  }

  function clearErrors() {
    const errorElements = form.querySelectorAll('[id$="-error"]');
    errorElements.forEach(el => {
      el.textContent = '';
      el.classList.add('hidden');
    });
  }

  function setLoading(isLoading) {
    submitButton.disabled = isLoading;
    submitText.classList.toggle('hidden', isLoading);
    loadingText.classList.toggle('hidden', !isLoading);
  }

  function showStatus(message, isError = false) {
    status.textContent = message;
    status.classList.remove('hidden');
    
    // Remove all possible status classes
    status.classList.remove('bg-green-100', 'text-green-800', 'bg-red-100', 'text-red-800');
    
    // Add the appropriate status classes individually
    if (isError) {
      status.classList.add('bg-red-100');
      status.classList.add('text-red-800');
    } else {
      status.classList.add('bg-green-100');
      status.classList.add('text-green-800');
    }
  }

  // Format timestamps relative to now
  function formatRelativeTime(timestamp) {
    const date = new Date(timestamp);
    const now = new Date();
    const diffInSeconds = Math.floor((now - date) / 1000);
    
    if (diffInSeconds < 60) {
      return 'just now';
    } else if (diffInSeconds < 3600) {
      const minutes = Math.floor(diffInSeconds / 60);
      return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;
    } else if (diffInSeconds < 86400) {
      const hours = Math.floor(diffInSeconds / 3600);
      return `${hours} hour${hours > 1 ? 's' : ''} ago`;
    } else if (diffInSeconds < 604800) {
      const days = Math.floor(diffInSeconds / 86400);
      return `${days} day${days > 1 ? 's' : ''} ago`;
    } else {
      return date.toLocaleDateString(undefined, { 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
    }
  }

  // Update all timestamps on the page
  function updateTimestamps() {
    document.querySelectorAll('.comment-time').forEach(timeElement => {
      const timestamp = timeElement.dataset.timestamp;
      timeElement.textContent = formatRelativeTime(timestamp);
    });
  }

  // Update timestamps immediately and every minute
  updateTimestamps();
  setInterval(updateTimestamps, 60000);

  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    clearErrors();
    setLoading(true);
    
    const formData = new FormData(form);
    const data = {
      name: formData.get('name').trim(),
      comment: formData.get('comment').trim(),
      postSlug: formData.get('postSlug'),
      csrf: formData.get('csrf'),
      honeypot: formData.get('website')
    };

    // Basic validation
    if (data.name.length < 2) {
      showError('name', 'Name must be at least 2 characters long');
      setLoading(false);
      return;
    }

    if (data.comment.length < 10) {
      showError('comment', 'Comment must be at least 10 characters long');
      setLoading(false);
      return;
    }

    try {
      const response = await fetch('/.netlify/functions/submit-comment', {
        method: 'POST',
        body: JSON.stringify(data),
        headers: {
          'Content-Type': 'application/json'
        }
      });

      const result = await response.json();

      if (result.success) {
        showStatus('Comment submitted successfully! It will appear after moderation.');
        form.reset();
      } else {
        showStatus(result.error || 'Error submitting comment. Please try again.', true);
      }
    } catch (error) {
      console.error('Error:', error);
      showStatus('Error submitting comment. Please try again.', true);
    } finally {
      setLoading(false);
    }
  });
</script>
